buildscript {
    ext {
        versions = [
            kotlin: '1.6.21'
        ]
        deps = [
            androidTestRules: 'androidx.test:rules:1.3.0',
            androidXAnnotations: 'androidx.annotation:annotation:1.2.0',
            desugarJdkLibs: 'com.android.tools:desugar_jdk_libs:1.1.5',
            // Stick with 30.0 to allow running tests on non-Java 8 modules:
            guava: 'com.google.guava:guava:30.0-android',
            junit: 'junit:junit:4.13.2',
            junitAndroid: 'androidx.test.ext:junit:1.1.5',
            kotlinStdLib: "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin",
            multidex: 'com.android.support:multidex:1.0.3',
            threeTenAbp: 'com.jakewharton.threetenabp:threetenabp:1.3.1',
            threeTenBp: 'org.threeten:threetenbp:1.5.1:no-tzdb',
            truth: 'com.google.truth:truth:1.1.5'
        ]
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"

        classpath 'org.jetbrains.kotlinx:binary-compatibility-validator:0.5.0'
    }

    repositories {
        mavenCentral()
        google()
    }
}

apply plugin: 'binary-compatibility-validator'
apiValidation {
    ignoredProjects += ['test', 'app']
}

allprojects { project ->
    repositories {
        mavenCentral()
        google()
    }

    project.plugins.withType(com.android.build.gradle.LibraryPlugin) {
        project.android.libraryVariants.all { variant ->
            variant.generateBuildConfigProvider.get().enabled = false
        }
    }
}

ext {
    libraryVersion = '2.3.0-SNAPSHOT'

    buildToolsVersion = '29.0.3'
    compileSdk = 29
    multidexMinSdk = 4
    threeTenAbpMinSdk = 15
    androidXMinSdk = 14

    keystore = project.hasProperty('personalKeystore') ? personalKeystore : 'x'
    keystorePassword = project.hasProperty('personalKeystorePassword') ? personalKeystorePassword : 'x'
    keyAlias = project.hasProperty('personalKeyAlias') ? personalKeyAlias : 'x'
    keyPassword = project.hasProperty('personalKeyPassword') ? personalKeyPassword : 'x'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
